public class Solution
{
    public int TotalNQueens(int n)
    {
        int count = 0;
        bool[] cols = new bool[n];          // columns
        bool[] diag1 = new bool[2 * n - 1]; // major diagonals (row + col)
        bool[] diag2 = new bool[2 * n - 1]; // minor diagonals (row - col + n - 1)

        Backtrack(0, n, cols, diag1, diag2, ref count);
        return count;
    }

    private void Backtrack(int row, int n, bool[] cols, bool[] diag1, bool[] diag2, ref int count)
    {
        if (row == n)
        {
            count++;
            return;
        }

        for (int col = 0; col < n; col++)
        {
            int d1 = row + col;
            int d2 = row - col + n - 1;

            if (cols[col] || diag1[d1] || diag2[d2])
                continue;

            cols[col] = true;
            diag1[d1] = true;
            diag2[d2] = true;

            Backtrack(row + 1, n, cols, diag1, diag2, ref count);

            cols[col] = false;
            diag1[d1] = false;
            diag2[d2] = false;
        }
    }
}
